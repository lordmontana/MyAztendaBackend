version: '3.8'

services:
  # SQL Server Database
#  sqlserver:
#    image: mcr.microsoft.com/mssql/server:2022-latest
#    container_name: sqlserver
#    environment:
#      - ACCEPT_EULA=Y
#      - SA_PASSWORD=YourStrong!Password
#    ports:
#      - "1433:1433"
#    networks:
#      - microservices-network

  # Employee Service
  employeeservice:
    build:
      context: .
      dockerfile: EmployeeService/Dockerfile
    container_name: employeeservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal;Database=MyAtzenda;User Id=sa;Password=as;Connection Timeout=30;Encrypt=False;;
    ports:
      - "5001:80"
   # depends_on:
  #    - sqlserver
    networks:
      - microservices-network

  # Location Service
  locationservice:
    build:
      context: .
      dockerfile: LocationService/Dockerfile
    container_name: locationservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal;Database=MyAtzenda;User Id=sa;Password=as;Connection Timeout=30;Encrypt=False;;
    ports:
      - "5002:80"
   # depends_on:
   #   - sqlserver
    networks:
      - microservices-network

  # Product Service
  productservice:
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    container_name: productservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal;Database=MyAtzenda;User Id=sa;Password=as;Connection Timeout=30;Encrypt=False;;
    ports:
      - "5003:80"
  #  depends_on:
  #    - sqlserver
    networks:
      - microservices-network

  # Customer Service
  customerservice:
    build:
      context: .
      dockerfile: CustomerService/Dockerfile
    container_name: customerservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal;Database=MyAtzenda;User Id=sa;Password=as;Connection Timeout=30;Encrypt=False;;
    ports:
      - "5004:80"
 #   depends_on:
 #     - sqlserver
    networks:
      - microservices-network
  # Auth Service
  authservice:
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    container_name: authservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal;Database=MyAtzenda;User Id=sa;Password=as;Connection Timeout=30;Encrypt=False;;
    ports:
      - "5005:80"
  #  depends_on:
  #    - sqlserver
    networks:
      - microservices-network

  # API Gateway
  apigatewayservice:
    build:
      context: .
      dockerfile: ApiGatewayService/Dockerfile
    container_name: apigatewayservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal;Database=MyAtzenda;User Id=sa;Password=as;Connection Timeout=30;Encrypt=False;;
    ports:
      - "5006:80"
#   depends_on:
#     - sqlserver
    networks:
      - microservices-network
    
  # Ticketing service
  ticketingservice:
    build:
      context: .
      dockerfile: TicketingService/Dockerfile
    container_name: ticketingservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal;Database=MyAtzenda;User Id=sa;Password=as;Connection Timeout=30;Encrypt=False;;
    ports:
      - "5007:80"
 #   depends_on:
 #     - sqlserver
    networks:
      - microservices-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379" # Ensure port 6379 is open for external connections

networks:
  microservices-network:
    driver: bridge
